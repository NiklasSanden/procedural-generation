#version 450 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D renderedTexture;

layout(binding = 1) uniform sampler2D rayTexture;
layout(binding = 2) uniform sampler3D noise;
layout(binding = 5) uniform samplerCube skybox;

layout(binding = 4) uniform usampler2D triTable;
const int edgeTable[12][2]   = { { 0, 1 }, { 1, 2 }, { 2, 3 }, { 3, 0 }, { 4, 5 }, { 5, 6 }, { 6, 7 }, { 7, 4 }, { 0, 4 }, { 1, 5 }, { 2, 6 }, { 3, 7 } };

uniform mat3 ViewMatrix;
uniform vec3 PlayerPos;
uniform float VoxelRes;
uniform float ViewDistance;

struct Material {
	vec3 diffuse;   // diffuse and ambient is the same on the material
	vec3 specular;  
	vec3 emission; // the diffuse, specular, and emission can be turned into textures for more detail
	float shininess;
};
uniform Material material;

struct DirectionalLight {
	bool exists;
    vec3 direction; 
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform DirectionalLight directionalLight;


struct RayTraceResult {
	bool hit;
	vec3 hitPos;
	vec3 voxelPos;
	float hitDistance;
	int voxelSize;
	int side;
};

struct MarchingCubesResult {
	bool hit;
	vec3 hitPos;
	vec3 normal;
};


RayTraceResult rayTrace(vec3 startPos, vec3 direction, float maxDistance);
vec4 calculateColour(vec3 samplePoint, float sampleDistance, vec3 hitPoint, int side, int voxelSize);
float getDensityValue(float x, float y, float z);
vec3 lerpVector(vec3 a, vec3 b, float aValue, float bValue, float level);

vec3 backgroundColour = vec3(0.2, 0.25, 0.4);
const float surfaceLevel = 0.0;

void main() {
	
	ivec2 pixelCoordinate = ivec2(gl_GlobalInvocationID.xy);
	vec3 direction = normalize(ViewMatrix * texelFetch(rayTexture, pixelCoordinate, 0).rgb);

	backgroundColour = texture(skybox, direction).xyz;

	vec4 colour = vec4(backgroundColour, 1.0);
	
	
	RayTraceResult result = rayTrace(PlayerPos, direction, ViewDistance);
	if (result.hit) 
		colour = calculateColour(result.voxelPos, result.hitDistance, result.hitPos, result.side, result.voxelSize);
	
	imageStore(renderedTexture, pixelCoordinate, colour);

}

// --------------------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------- RAYS ----------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------------

MarchingCubesResult marchingCubesIntersection(vec3 startPos, vec3 ray, vec3 cube, float cubeSize);
RayTraceResult rayTrace(vec3 startPos, vec3 direction, float maxDistance) {
	RayTraceResult result;

	int stepMultiplier = 1;
	vec3 voxelPosition = startPos;

	int xDirection = -1; if (direction.x > 0) xDirection = 1;
	int yDirection = -1; if (direction.y > 0) yDirection = 1;
	int zDirection = -1; if (direction.z > 0) zDirection = 1;
	vec3 directions = vec3(xDirection, yDirection, zDirection);

	float currentLength = 0.0;
	vec3 currentRelativePos = startPos / VoxelRes;
	vec3 nextIntersections = vec3(round(floor(currentRelativePos.x + (float(xDirection) + 1.0) / 2.0)), round(floor(currentRelativePos.y + (float(yDirection) + 1.0) / 2.0)), round(floor(currentRelativePos.z + (float(zDirection) + 1.0) / 2.0)));
	while (currentLength < maxDistance) {

//		float dist = (voxelPosition.x - startPos.x) * xDirection + (voxelPosition.y - startPos.y) * yDirection + (voxelPosition.z - startPos.z) * zDirection;
//		if (stepMultiplier == 1 && dist >= ViewDistance / 2.0) {
//			stepMultiplier = 2;
//			nextIntersections = vec3(round(floor(currentRelativePos.x / 2.0 + (float(xDirection) + 1.0) / 2.0)), round(floor(currentRelativePos.y / 2.0 + (float(yDirection) + 1.0) / 2.0)), round(floor(currentRelativePos.z / 2.0 + (float(zDirection) + 1.0) / 2.0)));
//			nextIntersections *= 2.0;
//		}
//		else if (stepMultiplier == 2 && dist >= ViewDistance / 1.25) {
//			stepMultiplier = 4;
//			nextIntersections = vec3(round(floor(currentRelativePos.x / 4.0 + (float(xDirection) + 1.0) / 2.0)), round(floor(currentRelativePos.y / 4.0 + (float(yDirection) + 1.0) / 2.0)), round(floor(currentRelativePos.z / 4.0 + (float(zDirection) + 1.0) / 2.0)));
//			nextIntersections *= 4.0;
//		}

		vec3 distances = abs(vec3((float(nextIntersections.x) - currentRelativePos.x) / direction.x, (float(nextIntersections.y) - currentRelativePos.y) / direction.y, (float(nextIntersections.z) - currentRelativePos.z) / direction.z));
		if (distances.x < distances.y && distances.x < distances.z) {

			currentLength += distances.x * VoxelRes;
			currentRelativePos += direction * distances.x;
			nextIntersections.x += xDirection * stepMultiplier;
			result.side = 0;

		}
		else if (distances.y < distances.z) {

			currentLength += distances.y * VoxelRes;
			currentRelativePos += direction * distances.y;
			nextIntersections.y += yDirection * stepMultiplier;
			result.side = 1;

		}
		else  {

			currentLength += distances.z * VoxelRes;
			currentRelativePos += direction * distances.z;
			nextIntersections.z += zDirection * stepMultiplier;
			result.side = 2;

		}

		voxelPosition = (nextIntersections - (directions * 0.5 * float(stepMultiplier))) * VoxelRes;

//		float noiseValue = getDensityValue(voxelPosition.x, voxelPosition.y, voxelPosition.z);
//		if (noiseValue >= surfaceLevel) {
//			result.hit = true;
//			result.hitPos = currentRelativePos * VoxelRes;
//			result.voxelPos = voxelPosition;
//			result.hitDistance = currentLength;
//			result.voxelSize = stepMultiplier;
//
//			return result;
//		}
		MarchingCubesResult tempResult = marchingCubesIntersection(startPos, direction, floor(voxelPosition / VoxelRes) * VoxelRes, VoxelRes * stepMultiplier);
		if (tempResult.hit) {
			result.hit = true;
			result.hitPos = tempResult.hitPos;
			result.voxelPos = voxelPosition;
			result.hitDistance = length(startPos - tempResult.hitPos);
			result.voxelSize = stepMultiplier;

			return result;
		}
	}

	result.hit = false;
	return result;
}

// --------------------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------- MARCHING CUBES ------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------------
MarchingCubesResult marchingCubesIntersection(vec3 startPos, vec3 ray, vec3 cube, float cubeSize) {
	vec3 vertexPositions[8];
	vertexPositions[0] = vec3(0.0, 0.0, 0.0);
	vertexPositions[1] = vec3(0.0, 0.0, 1.0);
	vertexPositions[2] = vec3(1.0, 0.0, 1.0);
	vertexPositions[3] = vec3(1.0, 0.0, 0.0);
	vertexPositions[4] = vec3(0.0, 1.0, 0.0);
	vertexPositions[5] = vec3(0.0, 1.0, 1.0);
	vertexPositions[6] = vec3(1.0, 1.0, 1.0);
	vertexPositions[7] = vec3(1.0, 1.0, 0.0);

	//float offsetToPositive = (cellsPerAxis + 2) / 2.0;
	float noiseValues[8];
	for (int i = 0; i < 8; i++) {
//		noiseValues[i] = texelFetch(noise,
//								    ivec3(round(cube.x + vertexPositions[i].x),
//										  round(cube.y + vertexPositions[i].y),
//										  round(cube.z + vertexPositions[i].z)),
//									0).r;
		//noiseValues[i] = texture(noise, cube + vertexPositions[i] * cubeSize).r;
		noiseValues[i] = getDensityValue(cube.x + vertexPositions[i].x * cubeSize, cube.y + vertexPositions[i].y * cubeSize, cube.z + vertexPositions[i].z * cubeSize);
	}

	int cubeIndex = 0;
	for (int i = 0; i < 8; i++) {
		if (noiseValues[i] > surfaceLevel) {
			cubeIndex |= 1 << i;
		}
	}

	vec3 closestIntersectionPoint = cube + ray * cubeSize * 100.0;
	bool intersect = false;
	for (int i = 0; i < 16; i += 3) {
	
		ivec2 texCoord = ivec2(cubeIndex, i);
		if (texelFetch(triTable, texCoord, 0).r == 32) break;

		int index1A = edgeTable[int(texelFetch(triTable, texCoord, 0).r)][0];
		int index1B = edgeTable[int(texelFetch(triTable, texCoord, 0).r)][1];
		vec3 tempVertexPosA = lerpVector(vertexPositions[index1A], vertexPositions[index1B], noiseValues[index1A], noiseValues[index1B], surfaceLevel);


		texCoord.y += 1;
		int index2A = edgeTable[int(texelFetch(triTable, texCoord, 0).r)][0];
		int index2B = edgeTable[int(texelFetch(triTable, texCoord, 0).r)][1];
		vec3 tempVertexPosB = lerpVector(vertexPositions[index2A], vertexPositions[index2B], noiseValues[index2A], noiseValues[index2B], surfaceLevel);


		texCoord.y += 1;
		int index3A = edgeTable[int(texelFetch(triTable, texCoord, 0).r)][0];
		int index3B = edgeTable[int(texelFetch(triTable, texCoord, 0).r)][1];
		vec3 tempVertexPosC = lerpVector(vertexPositions[index3A], vertexPositions[index3B], noiseValues[index3A], noiseValues[index3B], surfaceLevel);

		
		vec3 normal;
		vec3 AB = tempVertexPosB - tempVertexPosA;
		vec3 AC = tempVertexPosC - tempVertexPosA;
		normal.x = AB.y * AC.z - AB.z * AC.y;
		normal.y = AB.z * AC.x - AB.x * AC.z;
		normal.z = AB.x * AC.y - AB.y * AC.x;
		normal = normalize(normal);

		vec3 tri[] = { tempVertexPosA * cubeSize + cube, tempVertexPosB * cubeSize + cube, tempVertexPosC * cubeSize + cube };

		// intersection https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/ray-triangle-intersection-geometric-solution
		float D = -dot(normal, tri[0]);
		float t = -(dot(normal, startPos) + D) / dot(normal, ray);
		vec3 P = startPos + t * ray;

		vec3 edge0 = tri[1] - tri[0]; 
		vec3 edge1 = tri[2] - tri[1]; 
		vec3 edge2 = tri[0] - tri[2]; 
		vec3 C0 = P - tri[0]; 
		vec3 C1 = P - tri[1]; 
		vec3 C2 = P - tri[2]; 
		// P is inside the triangle 
		if (dot(normal, cross(edge0, C0)) > 0 && 
			dot(normal, cross(edge1, C1)) > 0 && 
			dot(normal, cross(edge2, C2)) > 0) {
			intersect = true;
			if (dot(closestIntersectionPoint - startPos, closestIntersectionPoint - startPos) > dot(P - startPos, P - startPos))
				closestIntersectionPoint = P;
		}
	}

	MarchingCubesResult returnValue;
	if (intersect) {
		returnValue.hit = true;
		returnValue.hitPos = closestIntersectionPoint;
	}
	else {
		returnValue.hit = false;
	}
	return returnValue;
}

// --------------------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------- COLOURING -----------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------------
vec4 calculateColour(vec3 samplePoint, float sampleDistance, vec3 hitPoint, int side, int voxelSize) {
	float localVoxelRes = VoxelRes * voxelSize;

	vec3 ao = vec3(1.0, 1.0, 1.0);
//	if (rayTrace(hitPoint + normalize((PlayerPos - hitPoint)) * localVoxelRes / 100.0, normalize(-directionalLight.direction), ViewDistance / 2.0).hit) 
//		ao = vec3(0.1, 0.1, 0.1);
//	if (rayTrace(samplePoint + normalize(-directionalLight.direction) * localVoxelRes * 2.0, normalize(-directionalLight.direction), ViewDistance / 2.0).hit) 
//		ao = vec3(0.1, 0.1, 0.1);
	if (rayTrace(hitPoint, normalize(-directionalLight.direction), ViewDistance / 2.0).hit)
		ao = vec3(0.1, 0.1, 0.1);


	vec3 Normal = vec3(0.0, -1.0, 0.0);
	// NOISE GRADIENTS
	Normal.x = getDensityValue(hitPoint.x + localVoxelRes, hitPoint.y				 , hitPoint.z) -
			   getDensityValue(hitPoint.x - localVoxelRes, hitPoint.y				 , hitPoint.z);
	Normal.y = getDensityValue(hitPoint.x				 , hitPoint.y + localVoxelRes, hitPoint.z) -
			   getDensityValue(hitPoint.x				 , hitPoint.y - localVoxelRes, hitPoint.z);
	Normal.z = getDensityValue(hitPoint.x				 , hitPoint.y				 , hitPoint.z + localVoxelRes) -
			   getDensityValue(hitPoint.x				 , hitPoint.y				 , hitPoint.z - localVoxelRes);
	
	// ROUNDED EDGES CUBE
//	if (hitPoint.x - samplePoint.x > 0.0) {
//		if (getDensityValue(samplePoint.x + localVoxelRes, samplePoint.y, samplePoint.z) < surfaceLevel) {
//			Normal.x = -1.0;
//		}
//		else {
//			Normal.x = 0.0;
//		}
//	}
//	else {
//		if (getDensityValue(samplePoint.x - localVoxelRes, samplePoint.y, samplePoint.z) < surfaceLevel) {
//			Normal.x = 1.0;
//		}
//		else {
//			Normal.x = 0.0;
//		}
//	}
//
//	if (hitPoint.y - samplePoint.y > 0.0) {
//		if (getDensityValue(samplePoint.x, samplePoint.y + localVoxelRes, samplePoint.z) < surfaceLevel) {
//			Normal.y = -1.0;
//		}
//		else {
//			Normal.y = 0.0;
//		}
//	}
//	else {
//		if (getDensityValue(samplePoint.x, samplePoint.y - localVoxelRes, samplePoint.z) < surfaceLevel) {
//			Normal.y = 1.0;
//		}
//		else {
//			Normal.y = 0.0;
//		}
//	}
//
//	if (hitPoint.z - samplePoint.z > 0.0) {
//		if (getDensityValue(samplePoint.x, samplePoint.y, samplePoint.z + localVoxelRes) < surfaceLevel) {
//			Normal.z = -1.0;
//		}
//		else {
//			Normal.z = 0.0;
//		}
//	}
//	else {
//		if (getDensityValue(samplePoint.x, samplePoint.y, samplePoint.z - localVoxelRes) < surfaceLevel) {
//			Normal.z = 1.0;
//		}
//		else {
//			Normal.z = 0.0;
//		}
//	}
//	Normal.x *= abs(samplePoint.x - hitPoint.x);
//	Normal.y *= abs(samplePoint.y - hitPoint.y);
//	Normal.z *= abs(samplePoint.z - hitPoint.z);

	// CUBE
//	if (side == 0) {
//		Normal = vec3(sign(samplePoint.x - hitPoint.x), 0.0, 0.0);
//	}
//	else if (side == 1) {
//		Normal = vec3(0.0, sign(samplePoint.y - hitPoint.y), 0.0);
//	}
//	else {
//		Normal = vec3(0.0, 0.0, sign(samplePoint.z - hitPoint.z));
//	}

	Normal = -normalize(Normal);

	vec3 lightDir = normalize(-directionalLight.direction);
	// diffuse
	float difference = max(dot(Normal, lightDir), 0.0);
	// specular
	vec3 reflectDirection = reflect(-lightDir, Normal);
	float spec = pow(max(dot(-normalize(hitPoint - PlayerPos), reflectDirection), 0.0), material.shininess);
	// combine

	vec3 green = vec3(0.133, 0.545, 0.133);
	vec3 brown = vec3(0.545 , 0.27, 0.07);
	vec3 grey = vec3(0.4, 0.4, 0.4);
	
	//vec3 newDiffuse = mix(mix(green, brown, clamp(samplePoint.y / 4.0 + 2.0, 0.0, 1.0)), brown, clamp(samplePoint.y / 5.0 + 2.0, 0.0, 1.0)) * ao;
	vec3 newDiffuse = mix(mix(green, brown, clamp(hitPoint.y / 4.0 + 2.0, 0.0, 1.0)), brown, clamp(hitPoint.y / 5.0 + 2.0, 0.0, 1.0)) * ao;

//	vec3 newDiffuse = brown;
//	if (roundEven(FragPosWorld.y) < -5.9) {
//		newDiffuse = grey;
//	}
//	else if (dot(WorldNormal, vec3(0.0, 1.0, 0.0)) > 0.75) {
//		newDiffuse = green;
//	}


	vec3 ambient  = directionalLight.ambient * newDiffuse; // material.diffuse
	vec3 diffuse  = directionalLight.diffuse * difference * newDiffuse; // material.diffuse
	//vec3 specular = directionalLight.specular * spec * material.specular;
	vec3 specular = vec3(0.0, 0.0, 0.0);

	return vec4(mix(ambient + diffuse + specular, backgroundColour, min(1.0, pow(sampleDistance / ViewDistance, 4.0))), 1.0);


	//return mix(vec4(0.7, 0.1, 0.1, 1.0), backgroundColour, min(1.0, pow(sampleDistance / viewDistance, 3)));

	//return vec4(1.0, 0.0, 0.0, 1.0);
}


// --------------------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------- NOISE ---------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------------

// float x, float y, float z, int octaves = 4, float persistence = 0.5, float frequency = 0.2, float amplitude = 1.0
float octavePerlin(float x, float y, float z, int octaves, float persistence, float frequency, float amplitude);

float getDensityValue(float x, float y, float z) {
	float noiseValue = 0.0;

	// Regular noise
	noiseValue = (octavePerlin(x, y, z, 6, 0.5, 0.2, 1.0) - y / 100.0);

	//noiseValue = octavePerlin(x, y, z, 6, 0.5, 0.2, 1.0);

	// Ground
	//noiseValue = -(y) / 5.0 + octavePerlin(x, y, z, 8, 0.5, 0.2, 1.0) * 5.0;
				
	// Warp
//	float warp = octavePerlin(x, y, z, 1, 0.4, 0.04, 1.0);
//	x += warp * 10;
//	y += warp * 10;
//	noiseValue = -(y) / 10.0 + octavePerlin(x, y + warp * 10, z, 9, 0.4, 0.1, 1.0);

	// Terrace ground
	//noiseValue = -(y) / 5.0 + octavePerlin(x, y, z, 4, 0.5, 0.2, 1.0) * 2.0 + mod((y), 0.5) / 5.0;
	
//	y = roundEven(y);
//	noiseValue = -(y) / 5.0 + octavePerlin(x, y, z, 5, 0.35, 0.1, 1.0) * 2.0;
				
	// Minecraft
//	float tempNoise = octavePerlin(x, 0.0, z, 1, 0.3, 0.015);
//	float tempA = -(y) / 10.0 + octavePerlin(x, y, z, 4, 0.3, 0.05);
//	float tempB = -(y) + 40.0 / 30.0 + octavePerlin(x, y, z, 4, 0.3, 0.05) * 1.5;
//
//	tempA = clamp(tempA, -1.0, 1.0);
//	float groundNoise = lerpFloat(tempB, tempA, min(1.0, tempNoise * tempNoise + tempNoise));
//				
//	float undergroundNoise = 0.075 + 2 * surfaceLevel - octavePerlin(x, y, z, 4, 0.3, 0.06);
//				
//	float groundAndUndergroundLerp = clamp(((y) - (20.0 * (1.0 - tempNoise))) / 20.0, 0.0, 1.0);
//	noiseValue = lerpFloat(undergroundNoise, groundNoise, groundAndUndergroundLerp);
				
	// Circle
	//noiseValue = 1.0 - length(vec3(x, y, z)) / 20.0 + octavePerlin(x, y, z, 4, 0.5, 0.2, 1.0);

	return noiseValue;
}

int fastFloor(float x);
float perlin(float x, float y, float z);
float grad(int hash, float x, float y, float z);
float fade(float t);
float lerp(float a, float b, float x);
float lerpFloat(float aValue, float bValue, float level);

const int permutations[256 * 2] = { 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
									151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

float octavePerlin(float x, float y, float z, int octaves, float persistence, float frequency, float amplitude) {
//	x += offset.x;
//	y += offset.y;
//	z += offset.z;

	vec3 samplePoint = vec3(x, y, z) / 100.0;

	float total = 0.0;
	float maxValue = 0.0;			// Used for normalizing result to 0.0 - 1.0
	for (int i = 0; i < octaves; i++) {
		total += texture(noise, samplePoint * frequency + vec3((100.0 * i), (100.0 * i), (100.0 * i))).r * amplitude;
		//total += perlin(x * frequency + (100.0 * i), y * frequency + (100.0 * i), z * frequency + (100.0 * i)) * amplitude;

		maxValue += amplitude;

		amplitude *= persistence;
		frequency *= 2.0;
	}

	return total / maxValue * 2.0 - 1.0;
}

int fastFloor(float x) {
	return x > 0.0 ? int(x) : int(x) - 1;
}

float perlin(float x, float y, float z) {
	int X = fastFloor(x);
	int Y = fastFloor(y);
	int Z = fastFloor(z);

	int xi = X & 255;								// Calculate the unit cube that the point asked will be located in
	int yi = Y & 255;								// The left bound is ( |_x_|,|_y_|,|_z_| ) and the right bound is that
	int zi = Z & 255;								// plus 1.  Next we calculate the location (from 0.0 to 1.0) in that cube.
	float xf = x - X;								// We also fade the location to smooth the result.
	float yf = y - Y;
	float zf = z - Z;
	float u = fade(xf);
	float v = fade(yf);
	float w = fade(zf);

	int aaa, aba, aab, abb, baa, bba, bab, bbb;
	aaa = permutations[permutations[permutations[xi    ] + yi    ] + zi    ];
	aba = permutations[permutations[permutations[xi    ] + yi + 1] + zi    ];
	aab = permutations[permutations[permutations[xi    ] + yi    ] + zi + 1];
	abb = permutations[permutations[permutations[xi    ] + yi + 1] + zi + 1];
	baa = permutations[permutations[permutations[xi + 1] + yi    ] + zi    ];
	bba = permutations[permutations[permutations[xi + 1] + yi + 1] + zi    ];
	bab = permutations[permutations[permutations[xi + 1] + yi    ] + zi + 1];
	bbb = permutations[permutations[permutations[xi + 1] + yi + 1] + zi + 1];

	float x1, x2, y1, y2;
	x1 = lerp(grad(aaa, xf, yf, zf),				// The gradient function calculates the dot product between a pseudorandom
		grad(baa, xf - 1.0, yf, zf),				// gradient vector and the vector from the input coordinate to the 8
		u);										// surrounding points in its unit cube.
	x2 = lerp(grad(aba, xf, yf - 1.0, zf),				// This is all then lerped together as a sort of weighted average based on the faded (u,v,w)
		grad(bba, xf - 1.0, yf - 1.0, zf),				// values we made earlier.
		u);
	y1 = lerp(x1, x2, v);

	x1 = lerp(grad(aab, xf, yf, zf - 1.0),
		grad(bab, xf - 1.0, yf, zf - 1.0),
		u);
	x2 = lerp(grad(abb, xf, yf - 1.0, zf - 1.0),
		grad(bbb, xf - 1.0, yf - 1.0, zf - 1.0),
		u);
	y2 = lerp(x1, x2, v);

	return (lerp(y1, y2, w) + 1.0) / 2.0;						// For convenience we bound it to 0 - 1 (theoretical min/max before is -1 - 1)
}

float grad(int hash, float x, float y, float z) {
	int h = hash & 15;									// Take the hashed value and take the first 4 bits of it (15 == 0b1111)
	float u = h < 8 /* 0b1000 */ ? x : y;				// If the most significant bit (MSB) of the hash is 0 then set u = x.  Otherwise y.

	float v;											// In Ken Perlin's original implementation this was another conditional operator (?:).  I
														// expanded it for readability.

	if (h < 4 /* 0b0100 */)								// If the first and second significant bits are 0 set v = y
		v = y;
	else if (h == 12 /* 0b1100 */ || h == 14 /* 0b1110*/)// If the first and second significant bits are 1 set v = x
		v = x;
	else 												// If the first and second significant bits are not equal (0/1, 1/0) set v = z
		v = z;

	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v); // Use the last 2 bits to decide if u and v are positive or negative.  Then return their addition.
}

float fade(float t) {
	// Fade function as defined by Ken Perlin.  This eases coordinate values
	// so that they will ease towards integral values.  This ends up smoothing
	// the final output.
	return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);			// 6t^5 - 15t^4 + 10t^3
}

float lerp(float a, float b, float x) {
	return a + x * (b - a);
}

float lerpFloat(float aValue, float bValue, float level) {
	float returnValue = aValue + level * (bValue - aValue);
	return returnValue;
}

vec3 lerpVector(vec3 a, vec3 b, float aValue, float bValue, float level) {
	//return (a + b) / 2.0;
	return a + ((level - aValue) / (bValue - aValue)) * (b - a);
}
